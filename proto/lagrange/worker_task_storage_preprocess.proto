syntax = "proto3";

package lagrange.worker_task_storage_preprocess;

message WorkerTask {
  message WorkerTaskType {
    message Mpt {
      message MptProofLeafData {
        bytes address = 1;
        uint32 storage_slot = 2;
        bytes mapping_key = 3;
        bytes node = 4;
        bytes hash = 5;
      }

      message MptProofBranchData {
        bytes address = 1;
        bytes hash = 2;
        map<string, uint64> children_copy_on_write_info = 3;
        bytes node = 4;
        repeated bytes child_proofs = 5;
      }

      oneof Data {
        MptProofLeafData mpt_proof_leaf_data = 1;
        MptProofBranchData mpt_proof_branch_data = 2;
      }
    }
    message Position {
      uint64 level = 1;
      uint64 index = 2;
    }
    message StorageDb {
      message StorageDbLeafData {
        bytes address = 1;
        Position position = 2;
        bytes key = 3;
        bytes value = 4;
      }
      message StorageDbBranchData {
        message CopyOnWriteInfo {
          Position position = 1;
          uint64 p = 2;
        }
        bytes address = 1;
        Position position = 2;
        repeated CopyOnWriteInfo children_copy_on_write_info = 3;
        bytes left_child_proof = 4;
        bytes right_child_proof = 5;
      }

      oneof Data {
        StorageDbLeafData storage_db_leaf_data = 1;
        StorageDbBranchData storage_db_branch_data = 2;
      }
    }
    message LengthExtract {
      bytes contract = 1;
      uint32 length_slot = 2;
      repeated bytes mpt_nodes = 3;
    }
    message LengthMatch {
      bytes contract = 1;
      uint64 block_number = 2;
      bytes mpt_root_hash = 3;
      bytes mapping_proof = 4;
      bytes length_extract_proof = 5;
      bool skip_match = 6;
    }
    message Equivalence {
      bytes contract = 1;
      Position storage_root_position = 2;
      uint64 storage_root_block_number = 3;
      bytes length_match_proof = 4;
      bytes storage_proof = 5;
    }
    message StateDb {
      message StateDbLeafData {
        bytes contract = 1;
        Position position = 2;
        bytes block_linking_proof = 3;
      }
      message StateDbBranchData {
        Position position = 1;
        bytes left_proof = 2;
        bytes right_proof = 3;
      }

      oneof Data {
        StateDbLeafData state_db_leaf_data = 1;
        StateDbBranchData state_db_branch_data = 2;
      }
    }
    message BlockLinking {
      bytes contract = 1;
      bytes header_rlp = 2;
      repeated bytes account_proof = 3;
      uint64 last_block_updated = 4;
      bytes equivalence_proof = 5;
    }
    message BlocksDb {
      uint64 leaf_index = 1;
      bytes previous_root_hash = 2;
      repeated bytes merkle_path = 3;
      Position state_root_position = 4;
      bytes new_leaf_proof = 5;
      bytes previous_leaf_proof = 6;
    }

    oneof Type {
      Mpt mpt = 1;
      StorageDb storage_db = 2;
      LengthExtract length_extract = 3;
      LengthMatch length_match = 4;
      Equivalence equivalence = 5;
      StateDb state_db = 6;
      BlockLinking block_linking = 7;
      BlocksDb blocks_db = 8;
    }
  }

  uint64 block_number = 1;
  uint64 chain_id = 2;
  WorkerTaskType task_type = 3;
}
